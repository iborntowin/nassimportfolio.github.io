---
import Layout from '../layouts/Layout.astro';
---
<Layout title="Terminal">
  <main class="terminal-main">
    <h1 class="welcome">Welcome to <span class="text-gradient">The terminal</span></h1>
    <section class="terminal-section">
      <div class="terminal">
        <pre class="terminal-output">
          <p id="typed-text" class="typed-text"></p>
        </pre>
        <input
          id="user-input"
          class="user-input"
          type="text"
          placeholder="Type a command and press Enter..."
        />
      </div>
      <div class="tooltip" id="tooltip">
        <div id="tooltip-content" class="tooltip-content">
          <a id="tooltip-link" class="tooltip-link" href="#">Link</a>
        </div>
      </div>
    </section>
  </main>
</Layout>

  <style>
    h1 {
		font-size: 3rem;
		font-weight: 800;
		margin: 0;
	}
    .welcome {
		text-align: center;
	}
	.text-gradient {
		background-image: var(--accent-gradient);
		-webkit-background-clip: text;
		-webkit-text-fill-color: transparent;
		background-size: 400%;
		background-position: 0%;
	}
    .tooltip-link{
        color: white;
    }
    
  main {
    margin: auto;
    padding: 2rem;
    max-width: 800px;
  }

  .terminal-section {
    text-align: center;
    margin-bottom: 2rem;
  }

  .terminal {
    background: white;
    color: rgb(10, 80, 0);
    padding: 1.5rem;
    border-radius: 0.5rem;
    font-family: 'Courier New', monospace;
    white-space: pre-line;
    font-size: 1.5rem;
    border: 2px solid var(--accent-gradient);
    box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.2);
  }

  .prompt {
    color: var(--accent-gradient);
    text-align: right;
  }

  .typed-text {
    text-align: center; /* Center-align the typed text */
  }

  .user-input {
    background: transparent;
    border: none;
    color: var(--accent-color);
    font-family: 'Courier New', monospace;
    font-size: 1.5rem;
    width: 100%;
    outline: none;
    margin-top: 0.5rem;
    height: 10rem;  }
    @media screen and (max-width: 768px) {
    main {
      padding: 1rem;
    }

    .terminal {
      padding: 1rem;
      font-size: 1rem;
      border: 1px solid var(--accent-gradient);
    }

    /* Adjust terminal text overflow */
    .terminal-output {
      overflow: auto;
      max-height: 150px; /* Limit the height to prevent overflow */
    }
  }
</style>




<script>
    const typedTextElement = document.getElementById('typed-text');
    const userInputElement = document.getElementById('user-input');
    const tooltip = document.getElementById('tooltip');
    const tooltipContent = document.getElementById('tooltip-content');
    const tooltipLink = document.getElementById('tooltip-link');
  
    const responses = {
      help: "Available commands: \n- help\n- about\n- skills\n- contact\n- home",
      about: "I craft innovative and user-friendly desktop applications..",
      skills: "I'm proficient in a wide range of skills including...",
      contact: "You can reach out to me at nassim28maaoui@gmail.com",
      home: "Welcome to my portfolio website! \n Type 'help' for a list of commands.",
    };
  
  // Focus the input field when the page loads
  window.onload = function() {
    userInputElement.focus();
  };

    function displayResponse(command) {
  const response = responses[command] || "Command not found. Try 'help' for a list of commands.";
  typedTextElement.textContent = `$${command}\n${response}`;

  // Check if command corresponds to a link
 // Check if command corresponds to a link
const linkCommands = ['about', 'skills', 'contact'];
if (linkCommands.includes(command)) {
  tooltipLink.textContent = `Visit ${command}`;
  tooltipLink.href = new URL(`/${command}`, window.location.href).toString();
  tooltipLink.style.color = "black"; // Set the color to black
  tooltip.style.display = 'block';
} else if (command === "home") {
  tooltipLink.textContent = `Visit ${command}`;
  tooltipLink.href = new URL("/", window.location.href).toString();
  tooltipLink.style.color = "black"; // Set the color to black
  tooltip.style.display = 'block';
} else {
  tooltipLink.style.color = ''; // Reset the color
  tooltip.style.display = 'none';
}
    }
  userInputElement.addEventListener('keyup', (event) => {
      if (event.key === 'Enter') {
        const command = userInputElement.value.trim().toLowerCase();
        displayResponse(command);
        userInputElement.value = '';
      }
    });
  
    tooltipLink.addEventListener('click', () => {
      // Hide tooltip after clicking
      tooltip.style.display = 'none';
    });
  </script>
  
